kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: argo-workflow.service-account-token
  annotations:
    kubernetes.io/service-account.name: argo-workflow
type: kubernetes.io/service-account-token
EOF

---

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: patch-workflowtasksets
  namespace: argo
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflowtasksets/status
  verbs:
  - get
  - list
  - watch
  - patch
EOF

---

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: workflowtasksets
  namespace: argo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: agent
subjects:
- kind: ServiceAccount
  name: argo-workflow
  namespace: argo
- kind: ServiceAccount
  name: default
  namespace: argo
- kind: ServiceAccount
  name: argo-workflow
  namespace: argo
EOF

---

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agent
  annotations:
    workflows.argoproj.io/description: |
      This is the minimum recommended permissions needed if you want to use the agent, e.g. for HTTP or plugin templates.
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtasksets/status
    verbs:
      - list
      - watch
      - get
      - patch
      - create
      - delete
      - update
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtasksets 
    verbs:
      - list
      - watch
      - get
      - patch
      - create
      - delete
      - update
EOF